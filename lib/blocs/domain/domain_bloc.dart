import 'dart:async';
import 'dart:convert';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:http/http.dart' as http;
import 'package:masquarade_app/models/domain_model.dart';
import 'package:masquarade_app/utils/debug_telegram.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'domain_event.dart';
import 'domain_state.dart';
import '../../repositories/supabase_repository.dart';

class DomainBloc extends Bloc<DomainEvent, DomainState> {
  final SupabaseRepository repository;
  final SharedPreferences prefs;
  DomainModel? currentDomain;

  DomainBloc({
  required this.repository,
  required this.prefs,
  List<DomainModel>? cachedDomains,
  DomainModel? cachedCurrentDomain,
}) : super(cachedDomains != null ? DomainsLoaded(cachedDomains) : DomainInitial()) {
  currentDomain = cachedCurrentDomain;

  on<LoadDomains>(_onLoadDomains);
  on<RefreshDomains>(_onRefreshDomains);
  on<LoadUserDomain>(_onLoadUserDomain);
  on<SetCurrentDomain>(_onSetCurrentDomain);
  on<UpdateDomainSecurity>(_onUpdateDomainSecurity);
  on<UpdateDomainBaseIncome>(_onUpdateDomainBaseIncome);
  on<ResetNeutralizedDomains>((event, emit) {
  if (state is DomainsLoaded) {
    emit(DomainsLoaded((state as DomainsLoaded).domains));
  }
});
}

    Future<void> _onDomainsUpdated(
    DomainsUpdated event,
    Emitter<DomainState> emit,
  ) async {
    final currentState = state;
    List<DomainModel> oldDomains = [];
    if (currentState is DomainsLoaded) {
      oldDomains = currentState.domains;
    }

    emit(DomainsLoaded(event.domains));
    _checkForNeutralDomains(event.domains, oldDomains);
  }

  Future<void> _onSetCurrentDomain(
    SetCurrentDomain event,
    Emitter<DomainState> emit,
  ) async {
    currentDomain = event.domain;
    await prefs.setString('currentDomain', jsonEncode(event.domain.toJson()));
  }

  List<DomainModel> _checkForNeutralDomains(List<DomainModel> newDomains, List<DomainModel> oldDomains) {
  List<DomainModel> neutralized = [];
  for (final newDomain in newDomains) {
    if (newDomain.isNeutral) {
      final oldDomain = oldDomains.firstWhere(
        (domain) => domain.id == newDomain.id,
        orElse: () => DomainModel(
          id: -1,
          name: '',
          latitude: 0,
          longitude: 0,
          boundaryPoints: [],
          ownerId: '',
          isNeutral: false,
        ),
      );

      if (!oldDomain.isNeutral && newDomain.isNeutral && newDomain.ownerId.isNotEmpty) {
        neutralized.add(newDomain);
        _sendDomainNeutralNotification(newDomain);
      }
    }
  }
  return neutralized;
}

Future<void> _onLoadDomains(
  LoadDomains event,
  Emitter<DomainState> emit,
) async {
  List<DomainModel> oldDomains = [];
  if (state is DomainsLoaded) {
    oldDomains = (state as DomainsLoaded).domains;
  }

  emit(DomainLoading());
  try {
    final domains = await repository.getDomains();
    final neutralizedDomains = _checkForNeutralDomains(domains, oldDomains);

    for (final domain in domains) {
      if (domain.securityLevel == 0 && !domain.isNeutral) {
        await repository.setDomainNeutralFlag(domain.id, true);
      }
    }

    final updatedDomains = await repository.getDomains();
    emit(DomainsLoaded(updatedDomains, neutralizedDomains));
    await _cacheDomains(updatedDomains);
  } catch (e) {
    emit(DomainError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–µ–Ω—ã'));
  }
}

  Future<void> _onRefreshDomains(
    RefreshDomains event,
    Emitter<DomainState> emit,
  ) async {
    emit(DomainLoading());
    try {
      final domains = await repository.getDomains();
      emit(DomainsLoaded(domains));
    } catch (e) {
      emit(DomainError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã'));
    }
  }

  Future<void> _onLoadUserDomain(
  LoadUserDomain event,
  Emitter<DomainState> emit,
) async {
  emit(DomainLoading());
  try {
    await sendTelegramMode(chatId: '369397714', message: 'üîç LoadUserDomain for user: ${event.userId}', mode: 'debug');
    final domains = await repository.getDomains();

    // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–∞
    DomainModel userDomain = domains.firstWhere(
      (d) => d.ownerId == event.userId && !d.isNeutral,
      orElse: () {
        sendTelegramMode(chatId: '369397714', message: '‚ö†Ô∏è UserDomain: –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${event.userId}', mode: 'debug');
        return DomainModel(
          id: -1,
          name: '–ù–µ—Ç –¥–æ–º–µ–Ω–∞',
          latitude: 0,
          longitude: 0,
          boundaryPoints: [],
          ownerId: '',
        );
      },
    );
    emit(UserDomainLoaded(userDomain));
  } catch (e) {
    emit(DomainError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–º–µ–Ω'));
  }
}

  @override
void onTransition(Transition<DomainEvent, DomainState> transition) {
  super.onTransition(transition);
  
  // –ü—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –¥–æ–º–µ–Ω–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π 0, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã
  if (transition.nextState is DomainsLoaded) {
    final domains = (transition.nextState as DomainsLoaded).domains;
    
    for (final domain in domains) {
      if (domain.securityLevel == 0 && !domain.isNeutral) {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ
        repository.forceDomainNeutralization(domain.id);
      }
    }
  }
}

  Future<void> _onUpdateDomainBaseIncome(
  UpdateDomainBaseIncome event,
  Emitter<DomainState> emit,
) async {
  if (state is DomainsLoaded) {
    final domains = (state as DomainsLoaded).domains;
    final updatedDomains = domains.map((domain) {
      if (domain.id == event.domainId) {
        return domain.copyWith(baseIncome: event.newBaseIncome);
      }
      return domain;
    }).toList();

    emit(DomainsLoaded(updatedDomains));
    await _cacheDomains(updatedDomains);
  }
}

  Future<void> _cacheDomains(List<DomainModel> domains) async {
    {
      final jsonString = jsonEncode(domains.map((e) => e.toJson()).toList());
      await prefs.setString('cachedDomains', jsonString);
    }
  }

  Future<void> _onUpdateDomainSecurity(
  UpdateDomainSecurity event,
  Emitter<DomainState> emit,
) async {
  if (state is DomainsLoaded) {
    {

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      final domains = await repository.getDomains();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–º–µ–Ω—ã —Å –∑–∞—â–∏—Ç–æ–π 0, –Ω–æ –Ω–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
      for (final domain in domains) {
        if (domain.securityLevel == 0 && !domain.isNeutral) {
          await repository.setDomainNeutralFlag(domain.id, true);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
          await _sendDomainNeutralNotification(domain);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final updatedDomains = await repository.getDomains();
      emit(DomainsLoaded(updatedDomains));
      await _cacheDomains(updatedDomains);

    }
  }
}

Future<void> sendTelegramMessageDirect(String chatId, String message) async {
  {
    const notificationBotToken = '8398725116:AAHlIONC2IMvX54M6jtFpAiwIRTpgzZ6DVk';
    final url = Uri.parse(
      'https://api.telegram.org/bot$notificationBotToken/sendMessage',
    );

    final response = await http.post(
      url,
      body: {
        'chat_id': chatId,
        'text': message,
        'parse_mode': 'HTML'
      },
    );

    if (response.statusCode != 200) {
    }
  }
}

Future<void> _sendDomainNeutralNotification(DomainModel domain) async {
  try {
    sendTelegramMode(chatId: '369397714', message: 'üîî –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ ${domain.name}', mode: 'debug');

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ–º–µ–Ω–∞
    final ownerProfile = await repository.getProfileById(domain.ownerId);
    if (ownerProfile == null || ownerProfile.telegramChatId == null) {
      sendTelegramMode(chatId: '369397714', message: '‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç telegram_chat_id', mode: 'debug');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    final message =
      '‚ö†Ô∏è –í–ê–ñ–ù–û: –î–æ–º–µ–Ω "${domain.name}" —Å—Ç–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º!\n'
      '–ó–∞—â–∏—Ç–∞ –¥–æ–º–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ 0. –í—ã –±–æ–ª—å—à–µ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç–µ —ç—Ç—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await sendTelegramMessageDirect(ownerProfile.telegramChatId!, message);

    sendTelegramMode(chatId: '369397714', message: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–æ–º–µ–Ω–∞ ${domain.name}', mode: 'debug');
  } catch (e) {
  }
}
}