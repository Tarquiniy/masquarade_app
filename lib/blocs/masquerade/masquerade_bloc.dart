import 'dart:async';
import 'dart:math';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:geolocator/geolocator.dart';
import 'package:masquarade_app/utils/debug_telegram.dart';
import 'package:uuid/uuid.dart';

import '../../models/violation_model.dart';
import '../../models/profile_model.dart';
import '../../models/domain_model.dart';
import '../../repositories/supabase_repository.dart';

part 'masquerade_event.dart';
part 'masquerade_state.dart';

class MasqueradeBloc extends Bloc<MasqueradeEvent, MasqueradeState> {
  final SupabaseRepository repository;
  final ProfileModel currentProfile;
  final Random _random = Random();
  final Uuid _uuid = const Uuid();

  MasqueradeBloc({required this.repository, required this.currentProfile})
    : super(ViolationsLoading()) {
    on<LoadViolations>(_onLoadViolations);
    on<ReportViolation>(_onReportViolation);
    on<StartHunt>(_onStartHunt);
    on<CloseViolation>(_onCloseViolation);
    on<RevealViolator>(_onRevealViolator);
  }

  Future<void> _onLoadViolations(
    LoadViolations event,
    Emitter<MasqueradeState> emit,
  ) async {
    emit(ViolationsLoading());
    try {
      final list = await repository.getViolations();
      await sendDebugToTelegram(
        '‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${list.length}',
      );
      emit(ViolationsLoaded(list));
    } catch (e) {
      final errorMsg = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${e.toString()}';
      print(errorMsg);
      await sendDebugToTelegram(errorMsg);
      emit(ViolationsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π'));
    }
  }

  Future<void> _onReportViolation(
    ReportViolation event,
    Emitter<MasqueradeState> emit,
  ) async {
    try {
      await _createViolation(
        description: event.description,
        hungerSpent: event.hungerSpent,
        latitude: event.latitude,
        longitude: event.longitude,
        domainId: event.domainId,
        emit: emit,
      );
    } catch (e, stack) {
      await sendDebugToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏: $e\n$stack');
      emit(const ViolationsError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ'));
    }
  }

  Future<void> _onStartHunt(
    StartHunt event,
    Emitter<MasqueradeState> emit,
  ) async {
    try {
      final domainDebugInfo = '–î–æ–º–µ–Ω: ${event.domainId}';

      await sendDebugToTelegram(
        'üîç –ù–∞—á–∞—Ç–∞ –æ—Ö–æ—Ç–∞\n'
        '–ò–≥—Ä–æ–∫: ${currentProfile.characterName} (${currentProfile.id})\n'
        '$domainDebugInfo\n'
        '–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–º–µ–Ω–∞: ${event.isDomainOwner ? "–î–∞" : "–ù–µ—Ç"}\n'
        '–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ–¥: ${currentProfile.hunger}\n'
        '–ü–æ–∑–∏—Ü–∏—è: ${event.position.latitude}, ${event.position.longitude}',
      );

      if (currentProfile.hunger == 0) {
        final message = '‚ùå –û—Ö–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ–¥–∞';
        await sendDebugToTelegram(message);
        emit(const ViolationsError('–í—ã —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–Ω—ã –¥–ª—è –æ—Ö–æ—Ç—ã.'));
        return;
      }

      final newHunger = currentProfile.hunger - 1;
      await repository.updateHunger(currentProfile.id, newHunger);

      final violationProbability = event.isDomainOwner ? 0.25 : 0.5;
      final violationOccurs = _random.nextDouble() < violationProbability;

      String huntResultMessage = '‚úÖ –û—Ö–æ—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 1 –ø—É–Ω–∫—Ç –≥–æ–ª–æ–¥–∞';
      String violationMessage = '';
      int costToClose = 0;

      if (violationOccurs) {
        costToClose = event.isDomainOwner ? 1 : 2;

        await sendDebugToTelegram(
          '‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n'
          'Violator ID: ${currentProfile.id}\n'
          'Domain ID: ${event.domainId}\n'
          'Cost to close: $costToClose\n'
          'Lat/Lng: ${event.position.latitude}, ${event.position.longitude}',
        );

        await _createViolation(
          description: '–ù–µ–æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –æ—Ö–æ—Ç–∞',
          hungerSpent: 1,
          latitude: event.position.latitude,
          longitude: event.position.longitude,
          domainId: event.domainId,
          emit: emit,
        );
      }

      await sendDebugToTelegram(huntResultMessage + violationMessage);
      add(LoadViolations());

      emit(
        HuntCompleted(
          violationOccurred: violationOccurs,
          isDomainOwner: event.isDomainOwner,
          costToClose: violationOccurs ? costToClose : 0,
        ),
      );
    } catch (e) {
      final errorDetails = '‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ö–æ—Ç—ã: ${e.toString()}';
      await sendDebugToTelegram(errorDetails);
      emit(ViolationsError(errorDetails));
    }
  }

  Future<void> _onCloseViolation(
    CloseViolation event,
    Emitter<MasqueradeState> emit,
  ) async {
    try {
      await sendDebugToTelegram(
        'üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è\n'
        'ID –Ω–∞—Ä—É—à–µ–Ω–∏—è: ${event.violationId}\n'
        '–ò–≥—Ä–æ–∫: ${currentProfile.characterName}',
      );
      final violation = await repository.getViolationById(event.violationId);
      if (violation == null) {
        emit(ViolationsError('–ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
        return;
      }

      final domain = await repository.getDomainById(violation.domainId);
      if (domain == null || domain.ownerId != currentProfile.id) {
        emit(ViolationsError('–í—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º –¥–æ–º–µ–Ω–æ–º'));
        return;
      }

      if (currentProfile.influence < violation.costToClose) {
        emit(ViolationsError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–ª–∏—è–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è'));
        return;
      }

      await repository.closeViolation(violation.id, currentProfile.id);

      final newInfluence = currentProfile.influence - violation.costToClose;
      await repository.updateInfluence(currentProfile.id, newInfluence);

      add(LoadViolations());
      emit(ViolationClosedSuccessfully());
    } catch (e) {
      emit(ViolationsError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è: ${e.toString()}'));
    }
  }

  Future<void> _onRevealViolator(
    RevealViolator event,
    Emitter<MasqueradeState> emit,
  ) async {
    try {
      await sendDebugToTelegram(
        'üë§ –†–∞—Å–∫—Ä—ã—Ç–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è\n'
        'ID –Ω–∞—Ä—É—à–µ–Ω–∏—è: ${event.violationId}\n'
        '–ò–≥—Ä–æ–∫: ${currentProfile.characterName}',
      );
      final violation = await repository.getViolationById(event.violationId);
      if (violation == null) {
        emit(ViolationsError('–ù–∞—Ä—É—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'));
        return;
      }

      if (!violation.canBeRevealed) {
        emit(ViolationsError('–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è'));
        return;
      }

      final violatorProfile = await repository.getProfileById(
        violation.violatorId,
      );
      if (violatorProfile == null) {
        emit(ViolationsError('–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'));
        return;
      }

      await repository.revealViolation(
        id: violation.id,
        violatorName: violatorProfile.characterName,
        revealedAt: DateTime.now().toIso8601String(),
      );

      add(LoadViolations());
      emit(ViolatorRevealedSuccessfully());
    } catch (e) {
      emit(ViolationsError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: ${e.toString()}'));
    }
  }

  Future<void> _createViolation({
    required String description,
    required int hungerSpent,
    required double latitude,
    required double longitude,
    required int domainId,
    required Emitter<MasqueradeState> emit,
  }) async {
    final id = _uuid.v4();

    await sendDebugToTelegram(
      'üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ –º–∞—Å–∫–∞—Ä–∞–¥–∞\n'
      '–ò–≥—Ä–æ–∫: ${currentProfile.characterName} (${currentProfile.id})\n'
      '–û–ø–∏—Å–∞–Ω–∏–µ: $description\n'
      '–ì–æ–ª–æ–¥: $hungerSpent\n'
      '–î–æ–º–µ–Ω: $domainId\n'
      '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: $latitude, $longitude',
    );

    final violation = ViolationModel(
      id: id,
      violatorId: currentProfile.id,
      violatorName: null,
      domainId: domainId,
      description: description,
      hungerSpent: hungerSpent,
      costToClose: hungerSpent * 2,
      status: ViolationStatus.open,
      violatorKnown: false,
      createdAt: DateTime.now(),
      latitude: latitude,
      longitude: longitude,
      closedAt: null,
      revealedAt: null,
      resolvedBy: null,
    );

    await repository.createViolation(violation);

    final updatedHunger = currentProfile.hunger - hungerSpent;
    await repository.updateHunger(currentProfile.id, updatedHunger);

    add(LoadViolations());
    emit(ViolationReportedSuccessfully());
  }
}
