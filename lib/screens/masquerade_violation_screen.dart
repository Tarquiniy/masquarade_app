import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart';
import 'package:masquarade_app/blocs/domain/domain_bloc.dart';
import 'package:masquarade_app/blocs/domain/domain_event.dart';
import 'package:masquarade_app/blocs/domain/domain_state.dart';
import 'package:masquarade_app/blocs/masquerade/masquerade_bloc.dart';
import 'package:masquarade_app/models/domain_model.dart';
import 'package:masquarade_app/models/profile_model.dart';
import 'package:masquarade_app/utils/debug_telegram.dart';

class MasqueradeViolationScreen extends StatefulWidget {
  final ProfileModel profile;

  const MasqueradeViolationScreen({super.key, required this.profile});

  @override
  State<MasqueradeViolationScreen> createState() =>
      _MasqueradeViolationScreenState();
}

class _MasqueradeViolationScreenState extends State<MasqueradeViolationScreen> {
  Position? _position;
  DomainModel? _domain;
  int _step = 0;
  int _hungerSpent = 1;
  final TextEditingController _descriptionController = TextEditingController();
  bool _submitting = false;
  List<DomainModel> _allDomains = [];
  bool _isButtonCooldown = false;
  Timer? _cooldownTimer;
  int _cooldownSeconds = 0;

  @override
  void initState() {
    super.initState();
    _loadPositionAndDomain();

    try {
      final bloc = context.read<MasqueradeBloc>();
      print('‚úÖ Bloc –¥–æ—Å—Ç—É–ø–µ–Ω: $bloc');
    } catch (e) {
      print('‚ùå Bloc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $e');
    }
  }

  @override
  void dispose() {
    _cooldownTimer?.cancel();
    super.dispose();
  }

  void _startButtonCooldown() {
    setState(() {
      _isButtonCooldown = true;
      _cooldownSeconds = 7;
    });

    _cooldownTimer?.cancel();
    _cooldownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        if (_cooldownSeconds > 1) {
          _cooldownSeconds--;
        } else {
          _cooldownSeconds = 0;
          _isButtonCooldown = false;
          timer.cancel();
        }
      });
    });
  }

 Future<void> _loadPositionAndDomain() async {
    setState(() => _submitting = true);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      final repository = context.read<DomainBloc>().repository;
      _allDomains = await repository.getDomains();

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      final permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        await Geolocator.requestPermission();
      }

      final pos = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best,
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      final domain = _findDomainByCoordinates(pos.latitude, pos.longitude, _allDomains);

      setState(() {
        _position = pos;
        _domain = domain;
      });
    } finally {
      setState(() => _submitting = false);
    }
  }

  DomainModel _findDomainByCoordinates(double lat, double lng, List<DomainModel> domains) {
    sendTelegramMode(chatId: '369397714', message: 'üîç –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: $lat, $lng', mode: 'debug');

    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –Ω–µ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö
    for (final domain in domains) {
      if (!domain.isNeutral && domain.isPointInside(lat, lng)) {
        return domain;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ã—á–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö, –∏—â–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
    for (final domain in domains) {
      if (domain.isNeutral && domain.isPointInside(lat, lng)) {
        sendTelegramMode(chatId: '369397714', message: 'üåê –ù–∞–π–¥–µ–Ω –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω: ${domain.name} (ID: ${domain.id})', mode: 'debug');
        return domain;
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
    sendTelegramMode(chatId: '369397714', message: '‚ö†Ô∏è –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', mode: 'debug');
    return DomainModel(
      id: 0,
      name: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è',
      latitude: lat,
      longitude: lng,
      boundaryPoints: [],
      isNeutral: true,
      openViolationsCount: 0,
      ownerId: '',
    );
  }

  void _submitViolation() async {
    final desc = _descriptionController.text.trim();

    if (desc.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')));
      return;
    }

    if (_position == null || _domain == null) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')));
      return;
    }

    if (_isButtonCooldown) {
      return;
    }

    setState(() => _submitting = true);
    _startButtonCooldown();

    try {
      sendTelegramMode(
         chatId: '369397714', message: 'üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n'
        '‚Ä¢ Domain ID: ${_domain!.id}\n'
        '‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${_position!.latitude}, ${_position!.longitude}\n'
        '‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: $desc', mode: 'debug'
      );

      context.read<MasqueradeBloc>().add(
        ReportViolation(
          description: desc,
          hungerSpent: _hungerSpent,
          latitude: _position!.latitude,
          longitude: _position!.longitude,
          domainId: _domain!.id,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è')),
      );
    } finally {
      setState(() => _submitting = false);
    }
  }

  Widget _buildStepContent() {
    if (_position == null || _domain == null) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_step == 0) {
      return Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          const Text(
            '–°–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤ –≥–æ–ª–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?',
            style: TextStyle(fontSize: 16),
          ),
          const SizedBox(height: 16),
          Slider(
            value: _hungerSpent.toDouble(),
            min: 1,
            max: 5,
            divisions: 4,
            label: _hungerSpent.toString(),
            onChanged: (val) {
              setState(() => _hungerSpent = val.toInt());
            },
          ),
          Text(
            '–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: ${_hungerSpent * 2} –≤–ª–∏—è–Ω–∏—è',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
          Text(
            '–û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞: ${_domain!.influenceLevel}',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () => setState(() => _step = 1),
            child: const Text('–î–∞–ª–µ–µ'),
          ),
        ],
      );
    } else {
      return Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          const Text(
            '–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏, —á—Ç–æ–±—ã –Ω–∞—Ä—É—à–∏—Ç—å –º–∞—Å–∫–∞—Ä–∞–¥:',
            style: TextStyle(fontSize: 16),
          ),
          const SizedBox(height: 12),
          TextField(
            controller: _descriptionController,
            maxLines: 5,
            decoration: InputDecoration(
              hintText: '–Ø –æ—Ç—Ä–∞—Å—Ç–∏–ª –∫–æ–≥—Ç–∏ –ø—Ä—è–º–æ –Ω–∞ –ø–ª–æ—â–∞–¥–∏...',
              hintStyle: TextStyle(color: Colors.grey[600]),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              filled: true,
              fillColor: Colors.grey[900],
            ),
            style: const TextStyle(color: Colors.white),
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: (_isButtonCooldown || _submitting) ? null : _submitViolation,
            style: ElevatedButton.styleFrom(
              backgroundColor: (_isButtonCooldown || _submitting) 
                ? Colors.grey[700] 
                : Colors.red[800],
              foregroundColor: Colors.white,
              minimumSize: const Size.fromHeight(50),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: _submitting
                ? const CircularProgressIndicator(color: Colors.white)
                : _isButtonCooldown
                    ? Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            strokeWidth: 2,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            '–ü–£–°–¢–¨ –í–°–Å –ì–û–†–ò–¢!',
                            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                          ),
                        ],
                      )
                    : const Text(
                        '–ü–£–°–¢–¨ –í–°–Å –ì–û–†–ò–¢!',
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      ),
          ),
        ],
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<MasqueradeBloc, MasqueradeState>(
      listener: (context, state) {
        if (state is ViolationsError) {
          setState(() => _submitting = false);

          if (state.message == 'max_hunger_exceeded') {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ–¥ (5) –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω'),
                backgroundColor: Colors.red,
                duration: Duration(seconds: 3),
              ),
            );
          }
        } else if (state is ViolationReportedSuccessfully) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text(
                '–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!',
                style: TextStyle(color: Colors.white),
              ),
              backgroundColor: Colors.red,
              duration: Duration(seconds: 2),
            ),
          );
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
          Navigator.pop(context);
        }
      },
      child: Scaffold(
      appBar: AppBar(title: const Text('–ù–∞—Ä—É—à–µ–Ω–∏–µ –ú–∞—Å–∫–∞—Ä–∞–¥–∞')),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: _buildStepContent(),
      ),
    ));
  }

}