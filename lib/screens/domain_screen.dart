import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'package:masquarade_app/blocs/domain/domain_event.dart';
import 'package:masquarade_app/blocs/domain/domain_state.dart';
import 'package:masquarade_app/blocs/profile/profile_bloc.dart';
import 'package:masquarade_app/screens/domains_screen.dart';
import 'package:masquarade_app/utils/debug_telegram.dart';
import 'package:supabase_flutter/supabase_flutter.dart' hide AuthState;
import '../blocs/domain/domain_bloc.dart';
import '../blocs/masquerade/masquerade_bloc.dart';
import '../models/domain_model.dart';
import '../models/profile_model.dart';
import '../models/violation_model.dart';
import 'package:latlong2/latlong.dart' as latlng;

class DomainScreen extends StatefulWidget {
  final DomainModel domain;
  final ProfileModel profile;

  const DomainScreen({
    Key? key,
    required this.domain,
    required this.profile,
  }) : super(key: key);

  @override
  State<DomainScreen> createState() => _DomainScreenState();
}

class _DomainScreenState extends State<DomainScreen> {
  final MapController _mapController = MapController();
  Position? _position;
  bool _isLoadingLocation = false;
  bool _initialLoadNotDone = true;
  final int _maxSecurityLevel = 10;
  List<DomainModel> _allDomains = [];
  late DomainModel _currentDomain;
  StreamSubscription? _domainSubscription;
  final GlobalKey<_DomainScreenState> _domainScreenKey = GlobalKey();
  String? _ownerName;
  RealtimeChannel? _domainChannel;
  bool _hasShownNeutralDialog = false;
  StreamSubscription? _domainUpdateSubscription;
  bool _isCheckingLocation = false;


@override
void initState() {
  super.initState();
  _currentDomain = widget.domain;
  sendDebugToTelegram('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DomainScreen –¥–ª—è –¥–æ–º–µ–Ω–∞ ${_currentDomain.id}');

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  _subscribeToDomainUpdates();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DomainBloc
    _domainSubscription = context.read<DomainBloc>().stream.listen((state) {
      if (state is DomainsLoaded) {
        final updatedDomain = state.domains.firstWhere(
          (d) => d.id == _currentDomain.id,
          orElse: () => _currentDomain,
        );

        if (updatedDomain.securityLevel != _currentDomain.securityLevel) {
          setState(() {
            _currentDomain = updatedDomain;
          });
          sendDebugToTelegram('üîÑ –ó–∞—â–∏—Ç–∞ –¥–æ–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${_currentDomain.securityLevel}/$_maxSecurityLevel');
        }

        if (updatedDomain.isNeutral != _currentDomain.isNeutral) {
          setState(() {
            _currentDomain = updatedDomain;
          });

          // –ï—Å–ª–∏ –¥–æ–º–µ–Ω —Å—Ç–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º, –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (updatedDomain.isNeutral) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('–î–æ–º–µ–Ω ${updatedDomain.name} —Å—Ç–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º'),
                backgroundColor: Colors.orange,
              ),
            );
          }
        }
      }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞
    context.read<MasqueradeBloc>().add(LoadViolationsForDomain(_currentDomain.id));

    Future.delayed(Duration.zero, () {
      if (mounted) {
        _loadInitialData();
      }
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (_currentDomain.ownerId.isNotEmpty && _ownerName == null) {
      _loadOwnerName();
    }
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _refreshDomainData();
    });
  }

// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ dispose
@override
void dispose() {
  _domainUpdateSubscription?.cancel();
  _domainChannel?.unsubscribe();
  _domainSubscription?.cancel();
  super.dispose();
}

  Future<void> _loadOwnerName() async {
    final repository = context.read<DomainBloc>().repository;
    final ownerProfile = await repository.getProfileById(_currentDomain.ownerId);
    if (mounted) {
      setState(() {
        _ownerName = ownerProfile?.characterName;
      });
    }
  }

  void _subscribeToDomainUpdates() {
  final repository = context.read<DomainBloc>().repository;
  _domainUpdateSubscription = repository.client
    .from('domains')
    .stream(primaryKey: ['id'])
    .eq('id', _currentDomain.id)
    .listen((data) {
      if (data.isNotEmpty && mounted) {
        final updatedDomain = DomainModel.fromJson(data.first);
        setState(() {
          _currentDomain = updatedDomain;
        });
        sendDebugToTelegram('üîÑ –î–æ–º–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: ${updatedDomain.isNeutral ? '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' : '–ù–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'}');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        _checkAndShowNeutralDialog();
      }
    });
}

void _checkAndShowNeutralDialog() async {
  if (_isCheckingLocation || _hasShownNeutralDialog) return;

  _isCheckingLocation = true;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    final position = await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.best,
    );

    setState(() {
      _position = position;
    });

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω–∞
    final repository = context.read<DomainBloc>().repository;
    final domains = await repository.getDomains();
    final currentDomain = domains.firstWhere(
      (d) => d.id == _currentDomain.id,
      orElse: () => _currentDomain,
    );

    setState(() {
      _currentDomain = currentDomain;
    });

    sendDebugToTelegram(
      'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞:\n'
      '‚Ä¢ isNeutral: ${_currentDomain.isNeutral}\n'
      '‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: ${_position?.latitude}, ${_position?.longitude}\n'
      '‚Ä¢ –í –≥—Ä–∞–Ω–∏—Ü–∞—Ö: ${_currentDomain.isPointInside(_position!.latitude, _position!.longitude)}'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
    if (_currentDomain.isNeutral &&
        _position != null &&
        _currentDomain.isPointInside(_position!.latitude, _position!.longitude) &&
        !_hasShownNeutralDialog &&
        mounted) {

      _hasShownNeutralDialog = true;

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      Future.delayed(const Duration(milliseconds: 1000), () {
        if (mounted) {
          _showNeutralDomainDialog(context);
        }
      });
    }
  } catch (e) {
    sendDebugToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞: $e');
  } finally {
    _isCheckingLocation = false;
  }
}

  Future<void> _refreshDomainData() async {
    try {
      final repository = context.read<DomainBloc>().repository;
      final domains = await repository.getDomains();
      final updatedDomain = domains.firstWhere(
        (d) => d.id == _currentDomain?.id,
        orElse: () => _currentDomain!,
      );

      if (mounted) {
        setState(() {
          _currentDomain = updatedDomain;
        });
      }
    } catch (e) {
      sendDebugToTelegram('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–∞: $e');
    }
  }

  Future<void> _loadInitialData() async {
  sendDebugToTelegram('üåÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–º–µ–Ω–∞ ${_currentDomain.id}');
  await _getCurrentLocation();
  sendDebugToTelegram('üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ ${_currentDomain.id}');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  final repository = context.read<DomainBloc>().repository;
  _allDomains = await repository.getDomains();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  final updatedDomain = _allDomains.firstWhere(
    (d) => d.id == _currentDomain.id,
    orElse: () => _currentDomain,
  );

  setState(() {
    _currentDomain = updatedDomain;
  });

  sendDebugToTelegram(
    'üè∞ –î–µ—Ç–∞–ª–∏ –¥–æ–º–µ–Ω–∞:\n'
    '‚Ä¢ ID: ${_currentDomain.id}\n'
    '‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${_currentDomain.name}\n'
    '‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü: ${_currentDomain.ownerId}\n'
    '‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π: ${_currentDomain.isNeutral}\n'
    '‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${_currentDomain.openViolationsCount}\n'
    '‚Ä¢ –ì—Ä–∞–Ω–∏—Ü—ã: ${_currentDomain.boundaryPoints.length} —Ç–æ—á–µ–∫'
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
  _checkAndShowNeutralDialog();
}


  void _showNeutralDomainDialog(BuildContext context) {
  sendDebugToTelegram('üîÑ –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –∑–∞—Ö–≤–∞—Ç–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞');

  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (BuildContext context) {
      return AlertDialog(
        title: const Text(
          '–ó–∞—Ö–≤–∞—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
          style: TextStyle(color: Color(0xFFd4af37), fontWeight: FontWeight.bold),
        ),
        backgroundColor: const Color(0xFF2a0000),
        content: const Text(
          '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞. –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –¥–æ–º–µ–Ω?',
          style: TextStyle(color: Colors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _showCaptureOptionsDialog(context);
            },
            child: const Text(
              '–î–∞!',
              style: TextStyle(color: Color(0xFFd4af37)),
            ),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('–ù–µ—Ç, –º–Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–∫—É—à–∞—Ç—å'),
                  backgroundColor: Colors.blue,
                ),
              );
            },
            child: const Text(
              '–ù–µ—Ç, –º–Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–∫—É—à–∞—Ç—å',
              style: TextStyle(color: Colors.grey),
            ),
          ),
        ],
      );
    },
  );
}

  // –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –∑–∞—Ö–≤–∞—Ç–∞
  void _showCaptureOptionsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text(
            '–°–ø–æ—Å–æ–± –∑–∞—Ö–≤–∞—Ç–∞',
            style: TextStyle(color: Color(0xFFd4af37)),
          ),
          backgroundColor: const Color(0xFF2a0000),
          content: const Text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ö–≤–∞—Ç–∞ –¥–æ–º–µ–Ω–∞:',
            style: TextStyle(color: Colors.white70),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _processDomainCapture('—Å–∏–ª–æ–π');
              },
              child: const Text(
                '–ó–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∏–ª–æ–π',
                style: TextStyle(color: Color(0xFF8b0000)),
              ),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _processDomainCapture('–∫—É–ø–∏—Ç—å');
              },
              child: const Text(
                '–ö—É–ø–∏—Ç—å',
                style: TextStyle(color: Color(0xFFd4af37)),
              ),
            ),
          ],
        );
      },
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –¥–æ–º–µ–Ω–∞
  void _processDomainCapture(String method) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–°–Ω–∏–º–∏—Ç–µ –∑–Ω–∞—á–æ–∫ –∏ –æ–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è'),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 5),
      ),
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä-–∑–∞–º–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º
    final message =
      '‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è –ó–ê–ü–†–û–° –ù–ê –ó–ê–•–í–ê–¢ –î–û–ú–ï–ù–ê ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è\n\n'
      'üö® –í–ù–ò–ú–ê–ù–ò–ï –ú–ê–°–¢–ï–†–ê–ú! üö®\n\n'
      '–ò–≥—Ä–æ–∫ ${widget.profile.characterName} —Ö–æ—á–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –¥–æ–º–µ–Ω!\n'
      '‚Ä¢ –î–æ–º–µ–Ω: ${_currentDomain.name} (ID: ${_currentDomain.id})\n'
      '‚Ä¢ –°–ø–æ—Å–æ–±: $method\n'
      '‚Ä¢ –ò–≥—Ä–æ–∫: ${widget.profile.characterName} (${widget.profile.clan}, ${widget.profile.sect})\n'
      '‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @${widget.profile.external_name}\n'
      '‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${_position?.latitude.toStringAsFixed(4)}, ${_position?.longitude.toStringAsFixed(4)}\n\n'
      '‚ÄºÔ∏è –ù–ï–ú–ï–î–õ–ï–ù–ù–û –°–í–Ø–ñ–ò–¢–ï–°–¨ –° –ò–ì–†–û–ö–û–ú –î–õ–Ø –ü–†–û–í–ï–î–ï–ù–ò–Ø –°–¶–ï–ù–ö–ò –ó–ê–•–í–ê–¢–ê! ‚ÄºÔ∏è';

    sendDebugToTelegram(message);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–≤–æ–Ω–æ–∫ API
    // –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS/email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞–º
  }

  Future<void> _getCurrentLocation() async {
    setState(() => _isLoadingLocation = true);
    try {
      final permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        final newPermission = await Geolocator.requestPermission();
        if (newPermission == LocationPermission.denied) {
          return;
        }
      }

      final pos = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.best,
      );

      setState(() {
        _position = pos;
        _mapController.move(LatLng(pos.latitude, pos.longitude), 15);
      });
    } catch (e) {
      sendDebugToTelegram('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: $e');
    } finally {
      setState(() => _isLoadingLocation = false);
    }
  }

@override
  Widget build(BuildContext context) {
    if (_currentDomain == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('–û—à–∏–±–∫–∞', style: TextStyle(color: Colors.white)),
          backgroundColor: const Color(0xFF1a0000),
        ),
        body: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Color(0xFF1a0000), Color(0xFF2a0000)],
            ),
          ),
          child: const Center(
            child: Text(
              '–î–æ–º–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
              style: TextStyle(color: Colors.white70, fontSize: 18),
            ),
          ),
        ),
      );
    }

    return BlocListener<DomainBloc, DomainState>(
      listener: (context, state) {
        if (state is DomainsLoaded) {
          final updatedDomain = state.domains.firstWhere(
            (d) => d.id == _currentDomain!.id,
            orElse: () => _currentDomain!,
          );

          if (updatedDomain.securityLevel != _currentDomain!.securityLevel ||
              updatedDomain.influenceLevel != _currentDomain!.influenceLevel) {
            setState(() {
              _currentDomain = updatedDomain;
            });
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text(
            _currentDomain!.name.toUpperCase(),
            style: const TextStyle(
              fontWeight: FontWeight.bold,
              color: Color(0xFFd4af37),
              fontSize: 20,
              letterSpacing: 1.5,
              fontFamily: 'Gothic',
            ),
          ),
          backgroundColor: const Color(0xFF1a0000),
          iconTheme: const IconThemeData(color: Color(0xFFd4af37)),
          actions: [
            IconButton(
              icon: const Icon(Icons.my_location, size: 28),
              onPressed: _isLoadingLocation ? null : _getCurrentLocation,
              tooltip: '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –º–æ—ë–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏',
            ),
          ],
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(4),
            child: Container(
              height: 2,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    const Color(0xFFd4af37).withOpacity(0.5),
                    const Color(0xFF8b0000),
                    const Color(0xFFd4af37).withOpacity(0.5),
                ],
              ),
            ),
          ),
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFF1a0000), Color(0xFF2a0000)],
            stops: [0.3, 0.7],
          ),
        ),
        child: _buildBody(),
      ),
    ),
  );
}

  Widget _buildBody() {
    return Column(
      children: [
        // –ö–∞—Ä—Ç–∞
        Container(
          height: 250,
          decoration: BoxDecoration(
            borderRadius: const BorderRadius.only(
              bottomLeft: Radius.circular(20),
              bottomRight: Radius.circular(20),
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.8),
                spreadRadius: 3,
                blurRadius: 10,
                offset: const Offset(0, 3),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: const BorderRadius.only(
              bottomLeft: Radius.circular(20),
              bottomRight: Radius.circular(20),
            ),
            child: _buildMap(),
          ),
        ),

        Expanded(
          child: Container(
            padding: const EdgeInsets.all(16),
            child: ListView(
              children: [
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–º–µ–Ω–∞
                Container(
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  child: Center(
                    child: Text(
                      _currentDomain!.name.toUpperCase(),
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFFd4af37),
                        letterSpacing: 2,
                        fontFamily: 'Gothic',
                        shadows: [
                          Shadow(
                            blurRadius: 10,
                            color: Color(0xFF8b0000),
                            offset: Offset(0, 0),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),

                // –°—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞
                if (_currentDomain!.isNeutral)
                  Container(
                    padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                    margin: const EdgeInsets.only(bottom: 16),
                    decoration: BoxDecoration(
                      color: const Color(0xFF2a0000),
                      borderRadius: BorderRadius.circular(20),
                      border: Border.all(color: const Color(0xFFd4af37), width: 1),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: const [
                        Icon(Icons.warning, color: Color(0xFFd4af37), size: 20),
                        SizedBox(width: 8),
                        Text(
                          '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è',
                          style: TextStyle(
                            color: Color(0xFFd4af37),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),

                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                _buildSection(
                  title: '–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø',
                  icon: Icons.info,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildInfoRow('–°—Ç–∞—Ç—É—Å', _currentDomain!.isNeutral ? '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' : '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π'),
                      _buildInfoRow('–í–ª–∞–¥–µ–ª–µ—Ü', _currentDomain.ownerId.isNotEmpty ? _ownerName ?? _currentDomain.ownerId : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'),
                      _buildInfoRow('–î–æ—Ö–æ–¥', '${_currentDomain!.income} –ø—É–Ω–∫—Ç–æ–≤ –≥–æ–ª–æ–¥–∞ –≤ –¥–µ–Ω—å'),
                      _buildInfoRow('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
                          '${_currentDomain!.latitude.toStringAsFixed(4)}, '
                          '${_currentDomain!.longitude.toStringAsFixed(4)}'),
                    ],
                  ),
                ),

                const SizedBox(height: 20),

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–µ–Ω–∞
                _buildSection(
                  title: '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û–ú–ï–ù–ê',
                  icon: Icons.analytics,
                  child: Column(
                    children: [
                      Row(
                        children: [
                          _buildStatItem(
                            icon: Icons.security,
                            color: const Color(0xFF8b0000),
                            title: '–ó–∞—â–∏—Ç–∞',
                            value: '${_currentDomain!.securityLevel}/${_currentDomain!.maxSecurityLevel}',
                          ),
                          const SizedBox(width: 15),
                          _buildStatItem(
                            icon: Icons.attach_money_rounded,
                            color: const Color(0xFFd4af37),
                            title: '–í–ª–∏—è–Ω–∏–µ',
                            value: '${_currentDomain!.influenceLevel}/${_currentDomain!.maxinfluenceLevel}',
                          ),
                        ],
                      ),
                      const SizedBox(height: 15),
                      Row(
                        children: [
                          _buildStatItem(
                            icon: Icons.attach_money,
                            color: const Color(0xFF006400),
                            title: '–î–æ—Ö–æ–¥',
                            value: '${_currentDomain!.income}/–¥–µ–Ω—å',
                          ),
                          const SizedBox(width: 15),
                          _buildStatItem(
                            icon: Icons.warning,
                            color: const Color(0xFF8b0000),
                            title: '–ù–∞—Ä—É—à–µ–Ω–∏—è',
                            value: _currentDomain!.openViolationsCount.toString(),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 20),

                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç–æ–π
                _buildProtectionManagementSection(),

                const SizedBox(height: 20),

                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–¥–æ–º
                _buildHungerManagementSection(),

                const SizedBox(height: 20),

                //–ü–µ—Ä–µ–¥–∞—á–∞ –¥–æ–º–µ–Ω–∞
                _buildDomainManagementSection(),

                const SizedBox(height: 20),

                // –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                _buildViolationsSection(),

              ],
            ),
          ),
        ),
      ],
    );
  }

Widget _buildSection({required String title, required IconData icon, required Widget child}) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Row(
        children: [
          Icon(icon, color: const Color(0xFFd4af37), size: 20),
          const SizedBox(width: 8),
          Text(
            title,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Color(0xFFd4af37),
              letterSpacing: 1,
            ),
          ),
        ],
      ),
      const SizedBox(height: 12),
      Container(
        decoration: BoxDecoration(
          color: const Color(0xFF1a0000).withOpacity(0.8),
          borderRadius: BorderRadius.circular(15),
          border: Border.all(color: const Color(0xFFd4af37).withOpacity(0.3)),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.5),
              spreadRadius: 1,
              blurRadius: 5,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: child,
        ),
      ),


    ],
  );
}

Widget _buildDomainManagementSection() {
  final domain = _currentDomain;
  if (domain == null) return const SizedBox();

  return _buildSection(
    title: '–£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–ú–ï–ù–û–ú',
    icon: Icons.admin_panel_settings,
    child: Column(
      children: [
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–Ω–∏–∏
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: const Color(0xFF1a0000),
            borderRadius: BorderRadius.circular(10),
            border: Border.all(color: const Color(0xFFd4af37).withOpacity(0.3)),
          ),
          child: Column(
            children: [
              const Text(
                '–¢–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü',
                style: TextStyle(
                  color: Color(0xFFd4af37),
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                  domain.ownerId.isNotEmpty ? _ownerName ?? domain.ownerId : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                  style: const TextStyle(
                    color: Colors.white70,
                    fontSize: 16,
                  ),
                  textAlign: TextAlign.center,
              ),
            ],
          ),
        ),

        const SizedBox(height: 20),

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–º–µ–Ω–∞
        ElevatedButton.icon(
  onPressed: () => _showTransferDialog(context), // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ _showTransferDialog
  icon: const Icon(Icons.swap_horiz, size: 24),
  label: const Text(
    '–ü–ï–†–ï–î–ê–¢–¨ –î–û–ú–ï–ù –î–†–£–ì–û–ú–£ –ò–ì–†–û–ö–£',
            style: TextStyle(fontSize: 16),
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF1a0000),
            foregroundColor: const Color(0xFFd4af37),
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
            minimumSize: const Size(double.infinity, 60),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
              side: const BorderSide(color: Color(0xFF8b0000), width: 2),
            ),
            elevation: 5,
            shadowColor: Colors.black.withOpacity(0.5),
          ),
        ),

        const SizedBox(height: 12),
      ],
    ),
  );
}

void _showTransferDialog(BuildContext context) async {
  final players = await context.read<ProfileBloc>().getPlayers();

  // –§–∏–ª—å—Ç—Ä—É–µ–º, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
  final availablePlayers = players.where((p) => p.id != _currentDomain!.ownerId).toList();

  if (availablePlayers.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–º–µ–Ω–∞'),
        backgroundColor: Colors.orange,
      ),
    );
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
  final selectedPlayer = await showDialog<ProfileModel>(
    context: context,
    builder: (context) => AlertDialog(
      backgroundColor: const Color(0xFF1a0000),
      title: const Text(
        '–ü–ï–†–ï–î–ê–¢–¨ –î–û–ú–ï–ù',
        style: TextStyle(color: Color(0xFFd4af37)),
      ),
      content: SizedBox(
        width: double.maxFinite,
        child: ListView.builder(
          shrinkWrap: true,
          itemCount: availablePlayers.length,
          itemBuilder: (context, index) {
            final player = availablePlayers[index];
            return ListTile(
              title: Text(
                player.characterName,
                style: const TextStyle(color: Colors.white70),
              ),
              subtitle: Text(
                '${player.clan}, ${player.sect}',
                style: const TextStyle(color: Colors.grey),
              ),
              onTap: () => Navigator.pop(context, player),
            );
          },
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('–û—Ç–º–µ–Ω–∞', style: TextStyle(color: Colors.white70)),
        ),
      ],
    ),
  );

  if (selectedPlayer != null) {
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF1a0000),
        title: const Text(
          '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
          style: TextStyle(color: Color(0xFFd4af37)),
        ),
        content: Text(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–º–µ–Ω "${_currentDomain!.name}" –∏–≥—Ä–æ–∫—É ${selectedPlayer.characterName}?',
          style: const TextStyle(color: Colors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('–û—Ç–º–µ–Ω–∞', style: TextStyle(color: Colors.white70)),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', style: TextStyle(color: Color(0xFFd4af37))),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      _performDomainTransfer(context, selectedPlayer);
    }
  }
}

void _performDomainTransfer(BuildContext context, ProfileModel recipient) async {
  final domain = _currentDomain;
  if (domain == null) return;

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–æ–º–µ–Ω–∞
    final repository = context.read<DomainBloc>().repository;
    final domainBloc = context.read<DomainBloc>();
    final profileBloc = context.read<ProfileBloc>();

    await repository.transferDomain(domain.id.toString(), recipient.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º DomainBloc - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    domainBloc.add(LoadDomains());

    // –û–±–Ω–æ–≤–ª—è–µ–º ProfileBloc –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final currentProfileState = profileBloc.state;
    if (currentProfileState is ProfileLoaded) {
      final currentProfile = currentProfileState.profile;
      final freshProfile = await repository.getProfileById(currentProfile.id);
      if (freshProfile != null) {
        profileBloc.add(SetProfile(freshProfile));
      }
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–î–æ–º–µ–Ω "${domain.name}" –ø–µ—Ä–µ–¥–∞–Ω ${recipient.characterName}'),
        backgroundColor: Colors.green[800],
      ),
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
    Navigator.of(context).pop();
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–º–µ–Ω–∞: ${e.toString()}'),
        backgroundColor: Colors.red[800],
      ),
    );
  }
}

Widget _buildHungerManagementSection() {
  final domain = _currentDomain;
  if (domain == null) return const SizedBox();

  return _buildSection(
    title: '–£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–õ–û–î–û–ú',
    icon: Icons.restaurant,
    child: Column(
      children: [
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞ –∏–∑ baseIncome
        _buildStatIndicator(
          '–î–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ–¥ –¥–æ–º–µ–Ω–∞',
          '${domain.baseIncome} –ø—É–Ω–∫—Ç–æ–≤',
          domain.baseIncome / 10, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å. 10 –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          const Color(0xFF8b0000),
          Icons.attach_money,
        ),

        const SizedBox(height: 20),

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∫–æ—Ä–º–∏—Ç—å"
        ElevatedButton.icon(
          onPressed: () => _showFeedDialog(context),
          icon: const Icon(Icons.restaurant, size: 24),
          label: const Text(
            '–ù–ê–ö–û–†–ú–ò–¢–¨',
            style: TextStyle(fontSize: 16),
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF1a0000),
            foregroundColor: const Color(0xFFd4af37),
            padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
            minimumSize: const Size(double.infinity, 60),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
              side: const BorderSide(color: Color(0xFF8b0000), width: 2),
            ),
            elevation: 5,
            shadowColor: Colors.black.withOpacity(0.5),
          ),
        ),

        const SizedBox(height: 15),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: const Color(0xFF1a0000),
            borderRadius: BorderRadius.circular(10),
            border: Border.all(color: const Color(0xFFd4af37).withOpacity(0.3)),
          ),
          child: const Text(
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ–¥ –¥–æ–º–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.',
            style: TextStyle(
              fontSize: 12,
              color: Color(0xFFd4af37),
              height: 1.5,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ],
    ),
  );
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
void _showFeedDialog(BuildContext context) async {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  final players = await context.read<ProfileBloc>().getPlayers();

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  players.sort((a, b) => a.characterName.compareTo(b.characterName));

  // –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ null)
  ProfileModel? selectedPlayer;

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
  final searchController = TextEditingController();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
  await showDialog(
    context: context,
    builder: (context) => StatefulBuilder(
      builder: (context, setState) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        final filteredPlayers = searchController.text.isEmpty
            ? players
            : players.where((player) =>
                player.characterName.toLowerCase().contains(
                  searchController.text.toLowerCase()
                )).toList();

        return AlertDialog(
          title: const Text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞'),
          content: SizedBox(
            width: double.maxFinite,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
                TextField(
                  controller: searchController,
                  decoration: const InputDecoration(
                    hintText: '–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏...',
                    prefixIcon: Icon(Icons.search),
                  ),
                  onChanged: (value) => setState(() {}),
                ),
                const SizedBox(height: 16),

                // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
                SizedBox(
                  height: 300,
                  width: double.maxFinite,
                  child: ListView.builder(
                    itemCount: filteredPlayers.length,
                    itemBuilder: (context, index) {
                      final player = filteredPlayers[index];
                      return ListTile(
                        leading: const Icon(Icons.person),
                        title: Text(player.characterName),
                        selected: selectedPlayer?.id == player.id,
                        onTap: () {
                          setState(() {
                            selectedPlayer = player;
                          });
                        },
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: selectedPlayer != null
                  ? () {
                      Navigator.pop(context);
                      _showAmountDialog(context, selectedPlayer!);
                    }
                  : null,
              child: const Text('–î–∞–ª–µ–µ'),
            ),
          ],
        );
      },
    ),
  );
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ–¥–∞
void _showAmountDialog(BuildContext context, ProfileModel targetPlayer) async {
  final domain = _currentDomain;
  if (domain == null) return;

  int amount = 1;

  await showDialog(
    context: context,
    builder: (context) => StatefulBuilder(
      builder: (context, setState) {
        return AlertDialog(
          title: Text('–ù–∞–∫–æ—Ä–º–∏—Ç—å ${targetPlayer.characterName}'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text('–°–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤ –≥–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å?'),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(
                    icon: const Icon(Icons.remove),
                    onPressed: () {
                      if (amount > 1) {
                        setState(() => amount--);
                      }
                    },
                  ),
                  Text(
                    '$amount',
                    style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                  ),
                  IconButton(
                    icon: const Icon(Icons.add),
                    onPressed: () {
                      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ baseIncome –¥–æ–º–µ–Ω–∞
                      if (amount < domain.baseIncome) {
                        setState(() => amount++);
                      }
                    },
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                '–ú–∞–∫—Å–∏–º—É–º: ${domain.baseIncome} (–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –¥–æ–º–µ–Ω–µ)',
                style: const TextStyle(fontSize: 12, color: Colors.grey),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                _transferHunger(context, targetPlayer, amount);
              },
              child: const Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'),
            ),
          ],
        );
      },
    ),
  );
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ–¥–∞
void _transferHunger(BuildContext context, ProfileModel targetPlayer, int amount) async {
  try {
    final repository = context.read<DomainBloc>().repository;
    final domainBloc = context.read<DomainBloc>();
    final profileBloc = context.read<ProfileBloc>();
    final domain = _currentDomain!;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ baseIncome
    if (domain.baseIncome < amount) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≥–æ–ª–æ–¥–∞ –≤ –¥–æ–º–µ–Ω–µ'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ RPC
    final result = await repository.transferHungerFromDomain(
      domain.id,
      targetPlayer.id,
      amount
    );

    if (result != null) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞
      final newBaseIncome = domain.baseIncome - amount;
      setState(() {
        _currentDomain = _currentDomain!.copyWith(baseIncome: newBaseIncome);
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º DomainBloc
      domainBloc.add(UpdateDomainBaseIncome(domain.id, newBaseIncome));

      // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≥–æ–ª–æ–¥
      if (targetPlayer.id == widget.profile.id) {
        final newHunger = targetPlayer.hunger - amount;
        profileBloc.add(UpdateHunger(newHunger > 0 ? newHunger : 0));
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('$amount –ø—É–Ω–∫—Ç–æ–≤ –≥–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã ${targetPlayer.characterName}'),
          backgroundColor: Colors.green,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ–¥–∞'),
          backgroundColor: Colors.red,
        ),
      );
    }
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ–¥–∞: $e'),
        backgroundColor: Colors.red,
      ),
    );
  }
}

Widget _buildProtectionManagementSection() {
  final domain = _currentDomain;
  if (domain == null) return const SizedBox();

  final currentProtection = domain.securityLevel;
  final maxProtection = domain.maxSecurityLevel;
  final currentInfluence = domain.influenceLevel;
  final maxInfluence = domain.maxinfluenceLevel;

  return _buildSection(
    title: '–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–©–ò–¢–û–ô',
    icon: Icons.shield,
    child: Column(
      children: [
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞—â–∏—Ç—ã –∏ –≤–ª–∏—è–Ω–∏—è
        Row(
          children: [
            Expanded(
              child: _buildStatIndicator(
                '–ó–∞—â–∏—Ç–∞',
                '$currentProtection/$maxProtection',
                currentProtection / maxProtection,
                const Color(0xFF8b0000),
                Icons.security,
              ),
            ),
            const SizedBox(width: 15),
            Expanded(
              child: _buildStatIndicator(
                '–í–ª–∏—è–Ω–∏–µ',
                '$currentInfluence/$maxInfluence',
                currentInfluence / maxInfluence,
                const Color(0xFFd4af37),
                Icons.auto_awesome,
              ),
            ),
          ],
        ),

        const SizedBox(height: 20),

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        Row(
          children: [
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _restoreProtection(context),
                icon: const Icon(Icons.shield, size: 20),
                label: const Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF1a0000),
                  foregroundColor: const Color(0xFFd4af37),
                  padding: const EdgeInsets.symmetric(vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                    side: const BorderSide(color: Color(0xFFd4af37), width: 1),
                  ),
                  elevation: 5,
                  shadowColor: Colors.black.withOpacity(0.5),
                ),
              ),
            ),
            const SizedBox(width: 10),
            Expanded(
              child: ElevatedButton.icon(
                onPressed: () => _upgradeProtection(context),
                icon: const Icon(Icons.enhanced_encryption, size: 20),
                label: const Text('–ü–æ–≤—ã—Å–∏—Ç—å'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF1a0000),
                  foregroundColor: const Color(0xFFd4af37),
                  padding: const EdgeInsets.symmetric(vertical: 15),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                    side: const BorderSide(color: Color(0xFFd4af37), width: 1),
                  ),
                  elevation: 5,
                  shadowColor: Colors.black.withOpacity(0.5),
                ),
              ),
            ),
          ],
        ),

        const SizedBox(height: 15),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: const Color(0xFF1a0000),
            borderRadius: BorderRadius.circular(10),
            border: Border.all(color: const Color(0xFFd4af37).withOpacity(0.3)),
          ),
          child: const Text(
            '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: 2 –≤–ª–∏—è–Ω–∏—è ‚Üí 1 –∑–∞—â–∏—Ç–∞\n'
            '–ü–æ–≤—ã—à–µ–Ω–∏–µ: 4 –≤–ª–∏—è–Ω–∏—è ‚Üí +1 –∫ –º–∞–∫—Å–∏–º—É–º—É',
            style: TextStyle(
              fontSize: 12,
              color: Color(0xFFd4af37),
              height: 1.5,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ],
    ),
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
Widget _buildStatIndicator(String title, String value, double progress, Color color, IconData icon) {
  return Container(
    padding: const EdgeInsets.all(12),
    decoration: BoxDecoration(
      color: const Color(0xFF1a0000),
      borderRadius: BorderRadius.circular(10),
      border: Border.all(color: const Color(0xFFd4af37).withOpacity(0.3)),
    ),
    child: Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 16, color: color),
            const SizedBox(width: 6),
            Text(
              title,
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: color,
          ),
        ),
        const SizedBox(height: 8),
        LinearProgressIndicator(
          value: progress,
          backgroundColor: Colors.grey[800],
          color: color,
          minHeight: 6,
          borderRadius: BorderRadius.circular(3),
        ),
      ],
    ),
  );
}

Widget _buildInfoRow(String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 150,
            child: Text(
              title,
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                color: Color(0xFFd4af37),
              ),
            ),
          ),
          const SizedBox(width: 10),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontSize: 16,
                color: Colors.white70,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ–¥–∞
  void _selectPlayerForHungerTransfer(BuildContext context, int amount) async {
    final players = await context.read<ProfileBloc>().getPlayers();
    players.sort((a, b) => a.characterName.compareTo(b.characterName));

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è'),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: players.length,
            itemBuilder: (context, index) {
              final player = players[index];
              return ListTile(
                title: Text(player.characterName),
                onTap: () {
                  Navigator.pop(context);
                  _confirmHungerTransfer(context, amount, player);
                },
              );
            },
          ),
        ),
      ),
    );
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ–¥–∞
  void _confirmHungerTransfer(BuildContext context, int amount, ProfileModel recipient) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏'),
        content: Text(
          '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å $amount –ø—É–Ω–∫—Ç–æ–≤ –≥–æ–ª–æ–¥–∞ –∏–≥—Ä–æ–∫—É ${recipient.characterName}?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                await context.read<DomainBloc>().repository.transferHunger(
                  fromUserId: widget.profile.id,
                  toUserId: recipient.id,
                  amount: amount,
                );
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('$amount –ø—É–Ω–∫—Ç–æ–≤ –≥–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã ${recipient.characterName}'),
                    backgroundColor: Colors.green,
                  ),
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–æ–¥–∞'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: const Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _restoreProtection(BuildContext context) async {
  final domain = _currentDomain;
  if (domain == null) return;

  int amount = 1;
  final int availableInfluence = domain.influenceLevel;
  final int currentProtection = domain.securityLevel;
  final int maxProtection = domain.maxSecurityLevel;
  final int maxRestorable = (availableInfluence / 2).floor();

  if (maxRestorable <= 0) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–ª–∏—è–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã'),
        backgroundColor: Colors.red,
      ),
    );
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
  final result = await showDialog<int>(
    context: context,
    builder: (context) => SimpleDialog(
      title: const Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã'),
      children: [
        Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Text('–î–æ—Å—Ç—É–ø–Ω–æ –≤–ª–∏—è–Ω–∏—è: $availableInfluence/${domain.maxinfluenceLevel}'),
              const SizedBox(height: 10),
              Text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:'),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(
                    icon: const Icon(Icons.remove),
                    onPressed: () {
                      if (amount > 1) {
                        amount--;
                        Navigator.pop(context, amount);
                      }
                    },
                  ),
                  Text('$amount', style: TextStyle(fontSize: 20)),
                  IconButton(
                    icon: const Icon(Icons.add),
                    onPressed: () {
                      if (amount < maxRestorable && (currentProtection + amount) < maxProtection) {
                        amount++;
                        Navigator.pop(context, amount);
                      }
                    },
                  ),
                ],
              ),
              const SizedBox(height: 10),
              Text('–°—Ç–æ–∏–º–æ—Å—Ç—å: ${amount * 2} –≤–ª–∏—è–Ω–∏—è'),
            ],
          ),
        ),
        SimpleDialogOption(
          onPressed: () => Navigator.pop(context, amount),
          child: const Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'),
        ),
        SimpleDialogOption(
          onPressed: () => Navigator.pop(context, null),
          child: const Text('–û—Ç–º–µ–Ω–∞'),
        ),
      ],
    ),
  );

  if (result == null) return;

  amount = result;
  final cost = amount * 2;
  final newInfluence = availableInfluence - cost;
  final newSecurity = currentProtection + amount;

  try {
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    final repository = context.read<DomainBloc>().repository;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ
    await repository.updateDomainInfluenceLevel(domain.id, newInfluence);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É
    await repository.updateDomainSecurity(domain.id, newSecurity);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setState(() {
      _currentDomain = domain.copyWith(
        securityLevel: newSecurity,
        influenceLevel: newInfluence,
      );
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ó–∞—â–∏—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ $amount –µ–¥. (–ø–æ—Ç—Ä–∞—á–µ–Ω–æ $cost –≤–ª–∏—è–Ω–∏—è)'),
        backgroundColor: Colors.green,
      ),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ BLoC
    context.read<DomainBloc>().add(LoadDomains());

  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
        backgroundColor: Colors.red,
      ),
    );
  }
  await _refreshDomainData();
}

void _upgradeProtection(BuildContext context) async {
  final domain = _currentDomain;
  if (domain == null) return;

  final availableInfluence = domain.influenceLevel;

  if (availableInfluence < 4) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–ª–∏—è–Ω–∏—è')),
    );
    return;
  }

  try {
    final repository = context.read<DomainBloc>().repository;
    final newInfluence = availableInfluence - 4;
    final newMaxSecurity = domain.maxSecurityLevel + 1;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await repository.updateDomainInfluenceLevel(domain.id, newInfluence);
    await repository.updateDomainMaxSecurity(domain.id, newMaxSecurity);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setState(() {
      _currentDomain = domain.copyWith(
        influenceLevel: newInfluence,
        maxSecurityLevel: newMaxSecurity,
      );
    });

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–ó–∞—â–∏—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–∞')),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await _refreshDomainData();

  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–û—à–∏–±–∫–∞: ${e.toString()}')),
    );
  }
}

Future<void> _updateDomainSecurityAndInfluence(int domainId, int newSecurity, int newInfluence) async {
  try {
    final repository = context.read<DomainBloc>().repository;

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    await repository.updateDomainSecurity(domainId, newSecurity);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ
    await repository.updateDomainInfluenceLevel(domainId, newInfluence);

    sendDebugToTelegram('‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –¥–æ–º–µ–Ω $domainId, –∑–∞—â–∏—Ç–∞: $newSecurity, –≤–ª–∏—è–Ω–∏–µ: $newInfluence');
  } catch (e, stack) {
    final errorMsg = '‚ùå –û—à–∏–±–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ $domainId: ${e.toString()}\n${stack.toString()}';
    sendDebugToTelegram(errorMsg);
    rethrow;
  }
}

Future<void> _updateDomainMaxSecurityAndInfluence(int domainId, int newMaxSecurity, int newInfluence) async {
  try {
    final repository = context.read<DomainBloc>().repository;

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    await repository.updateDomainMaxSecurity(domainId, newMaxSecurity);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ
    await repository.updateDomainInfluenceLevel(domainId, newInfluence);

    sendDebugToTelegram('‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å. –∑–∞—â–∏—Ç—ã: –¥–æ–º–µ–Ω $domainId, –º–∞–∫—Å. –∑–∞—â–∏—Ç–∞: $newMaxSecurity, –≤–ª–∏—è–Ω–∏–µ: $newInfluence');
  } catch (e, stack) {
    final errorMsg = '‚ùå –û—à–∏–±–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Å. –∑–∞—â–∏—Ç—ã –¥–æ–º–µ–Ω–∞ $domainId: ${e.toString()}\n${stack.toString()}';
    sendDebugToTelegram(errorMsg);
    rethrow;
  }
}

  Widget _buildMap() {
    return BlocBuilder<MasqueradeBloc, MasqueradeState>(
      builder: (context, state) {
        List<ViolationModel> violations = [];
        if (state is ViolationsLoaded) {
                  violations = state.violations.where((v) => v.status != ViolationStatus.closed).toList();
        }

        return FlutterMap(
          mapController: _mapController,
          options: MapOptions(
            initialCenter: _currentDomain.boundaryPoints.isNotEmpty
                ? _currentDomain.boundaryPoints[0]
                : const latlng.LatLng(55.751244, 37.618423),
            initialZoom: 13,
          ),
          children: [
            TileLayer(
              urlTemplate: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
            ),
            if (_currentDomain.boundaryPoints.isNotEmpty)
              PolygonLayer(
                polygons: [
                  Polygon(
                    points: _currentDomain.boundaryPoints,
                    color: Colors.blue.withOpacity(0.25),
                    borderColor: Colors.blue,
                    borderStrokeWidth: 3,
                  ),
                ],
              ),
            MarkerLayer(
              markers: [
                if (_position != null)
                  Marker(
                    point: latlng.LatLng(_position!.latitude, _position!.longitude),
                    width: 40,
                    height: 40,
                    child: const Icon(
                      Icons.person_pin_circle,
                      color: Colors.deepPurple,
                      size: 40,
                    ),
                  ),
                Marker(
                  point: latlng.LatLng(_currentDomain.latitude, _currentDomain.longitude),
                  width: 40,
                  height: 40,
                  child: const Icon(
                    Icons.location_city,
                    color: Colors.red,
                    size: 40,
                  ),
                ),
                // –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
                ...violations.map((violation) => Marker(
                  point: latlng.LatLng(violation.latitude, violation.longitude),
                  width: 30,
                  height: 30,
                  child: Icon(
                    _getViolationIcon(violation.status),
                    color: _getViolationColor(violation.status),
                    size: 30,
                  ),
                )).toList(),
              ],
            ),
          ],
        );
      },
    );
  }

  IconData _getViolationIcon(ViolationStatus status) {
    switch (status) {
      case ViolationStatus.open:
        return Icons.warning;
      case ViolationStatus.closed:
        return Icons.check_circle;
      case ViolationStatus.revealed:
        return Icons.visibility;
    }
  }

    Color _getViolationColor(ViolationStatus status) {
    switch (status) {
      case ViolationStatus.open:
        return Colors.yellow; // –ñ–µ–ª—Ç—ã–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
      case ViolationStatus.closed:
        return Colors.green; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
      case ViolationStatus.revealed:
        return Colors.purple; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
    }
  }

  Widget _buildInfoItem(String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 150,
            child: Text(
              title,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          const SizedBox(width: 10),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 16),
            ),
          ),
        ],
    )
    );
  }

  Widget _buildStatItem({
  required IconData icon,
  required Color color,
  required String title,
  required String value,
}) {
  return Expanded(
    child: Container(
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.5)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, size: 20, color: color),
              const SizedBox(width: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                  color: color,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    ),
  );
}

Widget _buildViolationCard(ViolationModel violation) {
  final bool isClosed = violation.status == ViolationStatus.closed;
  final bool isRevealed = violation.status == ViolationStatus.revealed;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –º–µ–Ω–µ–µ 3 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
  final hoursSinceCreation = DateTime.now().difference(violation.createdAt).inHours;
  final bool withinThreeHours = hoursSinceCreation < 3;

  // –ö–Ω–æ–ø–∫–∞ "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ú–∞—Å–∫–∞—Ä–∞–¥" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
  final bool showCloseButton = violation.status == ViolationStatus.open;
  // –ö–Ω–æ–ø–∫–∞ "–£–∑–Ω–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤
  final bool showRevealButton = !isRevealed && withinThreeHours;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—Ä—ã—Ç–∏—è - –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –æ–Ω–æ –≤—Å–µ–≥–¥–∞ –∑–µ–ª–µ–Ω–æ–µ
  Color borderColor;
  Color backgroundColor;
  Color textColor;
  IconData icon;

  if (isClosed) {
    // –ï—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –≤—Å–µ–≥–¥–∞ –∑–µ–ª–µ–Ω—ã–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    borderColor = Colors.green;
    backgroundColor = Colors.green.withOpacity(0.1);
    textColor = Colors.green;
    icon = Icons.check_circle;
  } else if (isRevealed) {
    borderColor = Colors.purple;
    backgroundColor = Colors.purple.withOpacity(0.1);
    textColor = Colors.purple;
    icon = Icons.visibility;
  } else {
    borderColor = Colors.yellow;
    backgroundColor = Colors.yellow.withOpacity(0.1);
    textColor = Colors.yellow;
    icon = Icons.warning;
  }

  return Container(
    margin: const EdgeInsets.only(bottom: 12),
    decoration: BoxDecoration(
      color: backgroundColor,
      borderRadius: BorderRadius.circular(12),
      border: Border.all(
        color: borderColor,
        width: 1.5,
      ),
      boxShadow: [
        BoxShadow(
          color: Colors.black.withOpacity(0.5),
          spreadRadius: 1,
          blurRadius: 5,
          offset: const Offset(0, 2),
        ),
      ],
    ),
    child: ExpansionTile(
      leading: Icon(
        icon,
        color: borderColor,
      ),
      title: Text(
        violation.description,
        style: TextStyle(
          color: textColor,
          fontWeight: isClosed ? FontWeight.normal : FontWeight.bold,
          decoration: isClosed ? TextDecoration.lineThrough : null,
        ),
      ),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '–°–æ–∑–¥–∞–Ω–æ: ${_formatDateTime(violation.createdAt)}',
            style: TextStyle(color: textColor.withOpacity(0.7), fontSize: 12),
          ),
          if (violation.violatorName != null)
            Text(
              '–ù–∞—Ä—É—à–∏—Ç–µ–ª—å: ${violation.violatorName}',
              style: TextStyle(color: textColor, fontSize: 12),
            ),
        ],
      ),
      trailing: Icon(
        Icons.arrow_drop_down,
        color: borderColor.withOpacity(0.7),
      ),
      children: [
        Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  _buildViolationStat('–ì–æ–ª–æ–¥', violation.hungerSpent.toString(), Icons.local_dining, textColor),
                  _buildViolationStat('–ó–∞–∫—Ä—ã—Ç–∏–µ', '${violation.costToClose}', Icons.security, textColor),
                  _buildViolationStat('–†–∞—Å–∫—Ä—ã—Ç–∏–µ', '${violation.costToReveal}', Icons.visibility, textColor),
                ],
              ),
              const SizedBox(height: 16),

              // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
              if (showCloseButton || showRevealButton)
                Row(
                  children: [
                    if (showCloseButton)
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _closeViolation(context, violation),
                          icon: Icon(Icons.check_circle, size: 18, color: Colors.white),
                          label: const Text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ú–∞—Å–∫–∞—Ä–∞–¥', style: TextStyle(color: Colors.white)),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                        ),
                      ),
                    if (showCloseButton && showRevealButton)
                      const SizedBox(width: 10),
                    if (showRevealButton)
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () => _revealViolator(context, violation),
                          icon: Icon(Icons.visibility, size: 18, color: Colors.white),
                          label: const Text('–£–∑–Ω–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è', style: TextStyle(color: Colors.white)),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.purple,
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                        ),
                      ),
                  ],
                ),

              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
              if (showCloseButton || showRevealButton)
                const SizedBox(height: 12),
              if (showCloseButton)
                Text(
                  '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è: ${violation.costToClose} –≤–ª–∏—è–Ω–∏—è',
                  style: TextStyle(
                    color: textColor,
                    fontSize: 12,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              if (showRevealButton)
                Text(
                  '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: ${violation.costToReveal} –≤–ª–∏—è–Ω–∏—è',
                  style: TextStyle(
                    color: textColor,
                    fontSize: 12,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              if (!withinThreeHours && !isRevealed)
                Text(
                  '–£–∑–Ω–∞—Ç—å –∏–º—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
                  style: TextStyle(
                    color: textColor.withOpacity(0.7),
                    fontSize: 12,
                    fontStyle: FontStyle.italic,
                  ),
                ),
            ],
          ),
        ),
      ],
    ),
  );
}

Widget _buildViolationStat(String title, String value, IconData icon, Color color) {
  return Column(
    children: [
      Icon(icon, size: 16, color: color),
      const SizedBox(height: 4),
      Text(title, style: TextStyle(fontSize: 10, color: color.withOpacity(0.7))),
      Text(value, style: TextStyle(fontSize: 14, color: color)),
    ],
  );
}

  void _closeViolation(BuildContext context, ViolationModel violation) async {
  final domain = _currentDomain;
  if (domain == null) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤–ª–∏—è–Ω–∏—è —É –¥–æ–º–µ–Ω–∞
  if (domain.influenceLevel < violation.costToClose) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('–í–ª–∏—è–Ω–∏—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è'),
        backgroundColor: Colors.red[800],
        duration: const Duration(seconds: 3),
      ),
    );
    return;
  }

  try {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ
    final repository = context.read<MasqueradeBloc>().repository;
    await repository.closeViolation(violation.id, domain.ownerId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞
    final newInfluence = domain.influenceLevel - violation.costToClose;
    await repository.updateDomainInfluenceLevel(domain.id, newInfluence);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.read<DomainBloc>().add(UpdateDomainInfluence(domain.id, newInfluence));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    context.read<MasqueradeBloc>().add(LoadViolationsForDomain(domain.id));

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('–í—ã –∑–∞–∫—Ä—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ú–∞—Å–∫–∞—Ä–∞–¥–∞'),
        backgroundColor: Colors.green[800],
        duration: const Duration(seconds: 3),
      ),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await _refreshDomainData();

  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
        backgroundColor: Colors.red[800],
      ),
    );
  }
}

void _revealViolator(BuildContext context, ViolationModel violation) async {
  final domain = _currentDomain;
  if (domain == null) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤–ª–∏—è–Ω–∏—è —É –î–û–ú–ï–ù–ê (–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
  if (domain.influenceLevel < violation.costToReveal) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('–í–ª–∏—è–Ω–∏—è –¥–æ–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —ç—Ç–æ –±—ã–ª'),
        backgroundColor: Colors.red[800],
        duration: const Duration(seconds: 3),
      ),
    );
    return;
  }

  try {
    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
    final repository = context.read<MasqueradeBloc>().repository;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
    final violatorProfile = await repository.getProfileById(violation.violatorId);
    if (violatorProfile == null) {
      throw Exception('–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∏—è–Ω–∏–µ –î–û–ú–ï–ù–ê (–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
    final newInfluence = domain.influenceLevel - violation.costToReveal;
    await repository.updateDomainInfluenceLevel(domain.id, newInfluence);

    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è
    await repository.revealViolation(
      id: violation.id,
      violatorName: violatorProfile.characterName,
      revealedAt: DateTime.now().toIso8601String(),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–º–µ–Ω–∞
    context.read<DomainBloc>().add(UpdateDomainInfluence(domain.id, newInfluence));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
    context.read<MasqueradeBloc>().add(LoadViolationsForDomain(domain.id));

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–≠—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –º–∞—Å–∫–∞—Ä–∞–¥–∞ —Å–æ–≤–µ—Ä—à–∏–ª ${violatorProfile.characterName}'),
        backgroundColor: Colors.green[800],
        duration: const Duration(seconds: 5),
      ),
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await _refreshDomainData();

  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
        backgroundColor: Colors.red[800],
      ),
    );
  }
}

  void _transferDomain(BuildContext context, ProfileModel recipient) async {
  try {
    final repository = context.read<DomainBloc>().repository;
    final domainBloc = context.read<DomainBloc>();
    final domain = _currentDomain!;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–æ–º–µ–Ω–∞
    await repository.transferDomain(domain.id.toString(), recipient.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setState(() {
      _currentDomain = _currentDomain!.copyWith(ownerId: recipient.id);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º DomainBloc
    domainBloc.add(LoadDomains());

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await _refreshDomainData();

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–î–æ–º–µ–Ω "${domain.name}" –ø–µ—Ä–µ–¥–∞–Ω ${recipient.characterName}'),
        backgroundColor: Colors.green,
      ),
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    Future.delayed(const Duration(seconds: 1), () {
      if (mounted) {
        Navigator.pop(context);
      }
    });
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–º–µ–Ω–∞: $e'),
        backgroundColor: Colors.red,
      ),
    );
  }
}

  void _confirmTransfer(
  BuildContext context,
  int domainId,
  ProfileModel recipient,
) {
  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: const Text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'),
      content: Text(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–º–µ–Ω "${_currentDomain.name}" –∏–≥—Ä–æ–∫—É ${recipient.characterName}?'),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('–û—Ç–º–µ–Ω–∞'),
        ),
        TextButton(
          onPressed: () async {
            Navigator.pop(context);
            try {
              _transferDomain(context, recipient);
            } catch (e) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–º–µ–Ω–∞'),
                  backgroundColor: Colors.red,
                ),
              );
            }
          },
          child: const Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'),
        ),
      ],
    ),
  );
}

  Widget _buildViolationsSection() {
  return _buildSection(
    title: '–ê–ö–¢–ò–í–ù–´–ï –ù–ê–†–£–®–ï–ù–ò–Ø –ú–ê–°–ö–ê–†–ê–î–ê',
    icon: Icons.warning_amber,
    child: BlocBuilder<MasqueradeBloc, MasqueradeState>(
      builder: (context, state) {
        if (state is ViolationsLoading) {
          return const Center(
            child: CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Color(0xFFd4af37)),
            ),
          );
        }

        if (state is ViolationsLoaded) {
          final violations = state.violations
              .where((v) => v.domainId == _currentDomain!.id)
              .toList();

          if (violations.isEmpty) {
            return Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: const Color(0xFF1a0000),
                borderRadius: BorderRadius.circular(15),
                border: Border.all(color: const Color(0xFFd4af37).withOpacity(0.3)),
              ),
              child: Column(
                children: [
                  Icon(Icons.verified_user, size: 60, color: const Color(0xFFd4af37).withOpacity(0.7)),
                  const SizedBox(height: 15),
                  const Text(
                    '–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.white70,
                    ),
                  ),
                  const SizedBox(height: 10),
                  Text(
                    '–ù–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞ –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ',
                    style: TextStyle(color: Colors.grey[400]),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            );
          }

          return Column(
            children: violations.map((v) => _buildViolationCard(v)).toList(),
          );
        }

        return const SizedBox();
      },
    ),
  );
}

  String _formatDateTime(DateTime date) {
  return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}.${date.year} '
      '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';
}

}