import 'dart:io';
import 'dart:typed_data';

import 'package:masquarade_app/utils/debug_telegram.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/profile_model.dart';
import '../models/domain_model.dart';
import '../models/violation_model.dart';

class SupabaseService {
  final SupabaseClient client;
  SupabaseService(this.client);

  Future<ProfileModel?> getProfileByLoginCode(
    String code,
    void Function(String)? debug,
  ) async {
    final normalized = code.trim().toUpperCase();
    debug?.call('[DEBUG AUTH] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥: $normalized');

    final List<Map<String, dynamic>> codes = await client
        .from('login_codes')
        .select()
        .eq('code', normalized)
        .limit(1);

    if (codes.isEmpty) {
      debug?.call('[DEBUG AUTH] ‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ login_codes');
      return null;
    }

    final entry = codes.first;
    final expiresAtRaw = entry['expires_at'] as String?;
    final telegramUsername = entry['external_name'] as String?;

    if (telegramUsername == null) {
      debug?.call('[DEBUG AUTH] ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω external_name');
      return null;
    }

    final expiresAt = DateTime.tryParse(expiresAtRaw ?? '');
    if (expiresAt == null || DateTime.now().isAfter(expiresAt)) {
      debug?.call('[DEBUG AUTH] ‚ö†Ô∏è –ö–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω: $expiresAt');
      return null;
    }

    debug?.call('[DEBUG AUTH] ‚úÖ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, username: $telegramUsername');
    final profileRow = await client
        .from('predefined_profiles')
        .select()
        .eq('telegram_username', telegramUsername)
        .maybeSingle();

    if (profileRow == null) {
      debug?.call('[DEBUG AUTH] ‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ telegram_username');
      return null;
    }

    debug?.call('[DEBUG AUTH] ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${profileRow.toString()}');
    return ProfileModel(
      id: telegramUsername,
      characterName: profileRow['character_name'],
      sect: profileRow['sect'],
      clan: profileRow['clan'],
      status: profileRow['status'],
      disciplines: List<String>.from(profileRow['disciplines']),
      bloodPower: profileRow['blood_power'],
      hunger: 0,
      domainIds: [],
      role: 'player',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      pillars: [],
    );
  }

  Future<ProfileModel?> getProfileByTelegram(
    String username, {
    void Function(String)? debug,
  }) async {
    final clean = username.trim().replaceFirst('@', '');
    debug?.call('üîé –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ external_name="$clean"');

    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ profiles
      var profileData = await client
          .from('profiles')
          .select()
          .eq('telegram_username', clean)
          .maybeSingle();

      if (profileData != null) {
        debug?.call('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ profiles');
        return ProfileModel.fromJson(profileData);
      }

      // 2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ profiles, –∏—â–µ–º –≤ predefined_profiles
      profileData = await client
          .from('predefined_profiles')
          .select()
          .eq('external_name', clean)
          .maybeSingle();

      if (profileData == null) {
        debug?.call('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

      // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ profiles
      final predefinedProfile = ProfileModel.fromJson(profileData);
      final newProfile = predefinedProfile.copyWith(
        hunger: 5,
        external_name: clean,
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      debug?.call('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: ${newProfile.toJson()}');

      final insertResponse = await client
          .from('profiles')
          .insert(newProfile.toJson())
          .select()
          .single();

      debug?.call('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${insertResponse}');
      return ProfileModel.fromJson(insertResponse);
    } catch (e) {
      debug?.call('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: $e');
      return null;
    }
  }

  Future<void> createProfile(ProfileModel profile) async {
    final json = profile.toJson();
    await client.from('profiles').insert(json);
  }

  Future<void> updateProfile(ProfileModel profile) async {
    await client.from('profiles').update(profile.toJson()).eq('id', profile.id);
  }

  Future<List<DomainModel>> getDomains() async {
    try {
      final data = await client.from('domains').select();
      final domains = (data as List)
          .map((e) => DomainModel.fromJson(e))
          .toList();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
      final hasNeutral = domains.any((d) => d.isNeutral);

      if (!hasNeutral) {
        await sendDebugToTelegram('‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏');
        domains.add(
          DomainModel(
            id: -1, // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
            name: 'Neutral Territory',
            latitude: 0,
            longitude: 0,
            boundaryPoints: [],
            isNeutral: true,
            ownerId: '–Ω–µ—Ç',
          ),
        );
      }

      return domains;
    } catch (e) {
      final errorMsg = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤: ${e.toString()}';
      print(errorMsg);
      await sendDebugToTelegram(errorMsg);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∫–∞–∫ fallback
      return [
        DomainModel(
          id: -1,
          name: 'Neutral Territory',
          latitude: 0,
          longitude: 0,
          boundaryPoints: [],
          isNeutral: true,
          ownerId: '–Ω–µ—Ç',
        ),
      ];
    }
  }

  Future<void> transferDomain(String domainId, String newOwnerId) async {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await client
        .from('profiles')
        .update({'domain_ids': [int.parse(domainId)]}) // –ò–∑–º–µ–Ω–µ–Ω–æ
        .eq('id', newOwnerId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞—Ä–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    final oldOwner = await client
        .from('domains')
        .select('owner_id')
        .eq('id', domainId)
        .single()
        .then((data) => data['owner_id'] as String?);

    if (oldOwner != null) {
      await client
          .from('profiles')
          .update({'domain_ids': []}) // –ò–∑–º–µ–Ω–µ–Ω–æ
          .eq('id', oldOwner);
    }
  }

  Future<String?> reportViolation(ViolationModel violation) async {
    final json = violation.toJson();
    final inserted = await client
        .from('violations')
        .insert(json)
        .select()
        .single();
    return inserted['id'] as String?;
  }

  Future<void> closeViolation(String violationId, String resolvedBy) async {
    await client
        .from('violations')
        .update({
          'status': 'closed',
          'closed_at': DateTime.now().toIso8601String(),
          'resolved_by': resolvedBy,
        })
        .eq('id', violationId);
  }

  Future<void> revealViolator(String violationId) async {
    await client
        .from('violations')
        .update({'revealed': true})
        .eq('id', violationId);
  }

  Future<Map<String, dynamic>> hunt(String hunterId, String targetId) async {
    final result = await client
        .rpc(
          'perform_hunt',
          params: {'hunter_id': hunterId, 'target_id': targetId},
        )
        .select()
        .maybeSingle();
    return result ?? {};
  }

  Future<void> transferHunger({
    required String fromUserId,
    required String toUserId,
    required int amount,
  }) async {
    await client.rpc(
      'transfer_hunger',
      params: {
        'from_user_id': fromUserId,
        'to_user_id': toUserId,
        'amount': amount,
      },
    );
  }

  Future<List<ViolationModel>> getViolations() async {
    try {
      final data = await client.from('violations').select();

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
      print('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${data.length}');
      await sendDebugToTelegram('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${data.length}');

      return (data as List).map((e) => ViolationModel.fromJson(e)).toList();
    } catch (e) {
      final errorMsg = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${e.toString()}';
      print(errorMsg);
      await sendDebugToTelegram(errorMsg);
      rethrow;
    }
  }

  Future<ViolationModel?> getViolationById(String id) async {
    final data = await client
        .from('violations')
        .select()
        .eq('id', id)
        .maybeSingle();
    return data == null ? null : ViolationModel.fromJson(data);
  }

  Future<DomainModel?> getDomainById(int id) async {
    if (id == null) {
      print('‚ö†Ô∏è getDomainById –≤—ã–∑–≤–∞–Ω —Å –ø—É—Å—Ç—ã–º ID');
      await sendDebugToTelegram('‚ö†Ô∏è getDomainById –≤—ã–∑–≤–∞–Ω —Å –ø—É—Å—Ç—ã–º ID');
      return null;
    }

    try {
      print('üîç –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–∞ –ø–æ ID: $id');
      final data = await client
          .from('domains')
          .select()
          .eq('id', id)
          .maybeSingle();

      if (data == null) {
        print('‚ùå –î–æ–º–µ–Ω —Å ID $id –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await sendDebugToTelegram('‚ùå –î–æ–º–µ–Ω —Å ID $id –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      return data == null ? null : DomainModel.fromJson(data);
    } catch (e) {
      final errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–º–µ–Ω–∞ $id: ${e.toString()}';
      print(errorMsg);
      await sendDebugToTelegram(errorMsg);
      return null;
    }
  }

  Future<void> createViolation(ViolationModel violation) async {
    try {
      final json = violation.toJson();
      json.remove('id');

      await sendDebugToTelegram(
        'üìù –§–∏–Ω–∞–ª—å–Ω—ã–π JSON –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è:\n$json',
      );

      await client.from('violations').insert(json);
    } catch (e, stack) {
      await sendDebugToTelegram('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è: $e\n$stack');
      rethrow;
    }
  }

  Future<ProfileModel?> updateHunger(String profileId, int hunger) async {
  try {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≥–æ–ª–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    final clampedHunger = hunger < 0 ? 0 : hunger;

    final response = await client
        .from('profiles')
        .update({'hunger': clampedHunger})
        .eq('id', profileId)
        .select()
        .single();

    return ProfileModel.fromJson(response);
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ–¥–∞: $e');
    return null;
  }
}

  Future<void> revealViolation({
    required String id,
    required String violatorName,
    required String revealedAt,
  }) async {
    await client
        .from('violations')
        .update({
          'violator_known': true,
          'violator_name': violatorName,
          'revealed_at': revealedAt,
          'status': 'revealed',
        })
        .eq('id', id);
  }

  Future<void> updateInfluence(String profileId, int influence) async {
    await client
        .from('profiles')
        .update({'influence': influence})
        .eq('id', profileId);
  }

  Future<ProfileModel?> getProfileById(String id) async {
    try {
      print('üîç Getting profile by ID: $id');
      final data = await client
          .from('profiles')
          .select()
          .eq('id', id)
          .maybeSingle();

      if (data == null) {
        print('‚ùå Profile not found for ID: $id');
        return null;
      }

      final profile = ProfileModel.fromJson(data);
      print('‚úÖ Profile loaded: ${profile.characterName}');
      return profile;
    } catch (e) {
      print('‚ùå Error getting profile by ID: $e');
      return null;
    }
  }

  Future<List<ProfileModel>> getAllProfiles() async {
    final data = await client.from('profiles').select();
    return (data as List).map((e) => ProfileModel.fromJson(e)).toList();
  }

  Future<void> checkViolationsTable() async {
    try {
      // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
      final response = await client.from('violations').select().limit(1);
      print('‚úÖ –¢–∞–±–ª–∏—Ü–∞ violations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } catch (e) {
      print('‚ùå –¢–∞–±–ª–∏—Ü–∞ violations –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${e.toString()}');
    }
  }

  Future<ProfileModel?> getCurrentProfile({
    void Function(String)? debug,
  }) async {
    try {
      final user = Supabase.instance.client.auth.currentUser;
      if (user == null) {
        debug?.call('‚ùó currentUser == null');
        return null;
      }

      final data = await Supabase.instance.client
          .from('profiles')
          .select()
          .eq('id', user.id)
          .maybeSingle();

      if (data == null) {
        debug?.call('‚ùó –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user.id=${user.id}');
        return null;
      }

      return ProfileModel.fromJson(data);
    } catch (e) {
      debug?.call('‚ùå –û—à–∏–±–∫–∞ –≤ getCurrentProfile: $e');
      return null;
    }
  }

  Future<void> updateDomainInfluence(int domainId, int newInfluence) async {
    try {
      await client
          .from('domains')
          .update({'admin_influence': newInfluence})
          .eq('id', domainId);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–∏—è–Ω–∏—è –¥–æ–º–µ–Ω–∞: $e');
      rethrow;
    }
  }

  Future<String> uploadMedia(
    Uint8List bytes,
    String fileName,
    {required String fileType}
  ) async {
    try {
      await client.storage
        .from('carpet_chat_media')
        .uploadBinary(
          fileName,
          bytes,
        );

      return client.storage
        .from('carpet_chat_media')
        .getPublicUrl(fileName);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e');
    }
  }

  Future<List<DomainModel>> getUserDomains(String userId) async {
    try {
      final data = await client
          .from('domains')
          .select()
          .eq('owner_id', userId);
      
      return (data as List).map((e) => DomainModel.fromJson(e)).toList();
    } catch (e) {
      sendDebugToTelegram('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      return [];
    }
  }
}